* The menu:
- DONE Scaling
- DONE The /Run/ menu: /Pause/ & /Continue/, set speed, /Forward/, /Backward/, /Reset/

- DONE The /Filter/ menu 
- DONE Respecting the filter for actions in the /Run/ menu.

- DONE Mouse over state
- DONE The /Search Menu/.

- DONE Random circular layout, the /Change Layout/ command.
- CANCELED (good enough layouts without it) Circular layout that minimizes intersections

* The format:
- DONE Automatic column width, /Scroll Left/ and /Scroll Right/
- DONE Arrows for showing parents and solution paths

* Further:
- DONE The map domain
- DONE Speeding up the graphics
- DONE Working with instances (e.g. pathfinding) + stats output
- DONE Configuration file
- DONE Handling command-line arguments
- DONE Extensible event
- DONE Organize the code
  * DONE Make sure that all outside code without exceptions (including reflection, boost libraries needed for graph stuff, X11 and cairo libraries) are in outside_headers.h. That is, all of my code should be at the end of the prep-processor output.
  * DONE Make headers.h list only the root headers in alphabetic order, so dependencies are made explicit.
- DONE Try pre-compiled headers (outside_headers.h)
- DONE Small things to be fixed:
  + DONE Need event for cancellation of current parent. Otherwise, I get two parents shown for one node.
- Clean the interfaces
  + DONE Algorithms should not get graph as a parameter (not a template parameter either). The graph should be computer from the log. Events should be added in Astar to not miss edges.
  + DONE Remove the NoGraph class.
  + DONE Make sure that templates that really depend only on State do not have Node as template parameter.
  + DONE Delete automaticLayoutFlag template parameter throughout. Deduce the layout based on whether the State has a member function for computing the layout.
  + Add a virtual constructor to all base classes that define a virtual method or explain why we don’t do it when we don’t.
  + AlgorithmLog should create copies of states, since algorithms such as IDA* modify state.
  + *Decision* with regards to free-standing functions instead of member functions (see comments in http://programmers.stackexchange.com/q/310330/216771): put it into the backlog.
- DONE Document the classes
- DONE (Makefile+ccache approach instead) Execution script
  + Have all pre-processor symbols begin with SLB_
  + Search for all symbols like this: make preprocessor CONFIG="projects/KGoal/ConfigMinHeuristic.h" | egrep -o "SLB_[A-Z|_]*" | sort | uniq
  + Forming MD5SUM:
    * It is impossible to run only the #includes to compute MD5SUM of only the configuration file (after including whatever configuration files it includes): gcc -E runs the whole pre-processing stage. So, can either compute MD5SUM of the entire thing or do some scripting, e.g.: https://raw.githubusercontent.com/vicaya/hypertable/e893460eaf628e2bf329ee6d30371751c5f82f5d/bin/gpp.pl
    * Do I have a reason not to computer the sum based on the whole pre-processed code?
- DONE Make sure that all configuration options work (pancake, etc.)
- DONE Produce the documentation:
  + The main page
  + Running instructions
  + Installation instructions
  + The pdf documentation
- DONE Try clean installation (install on a fresh Ubuntu install in VirtualBox)
- Produce videos of usage
- Submit
* Remains after K-Goal work:
** DONE Produce the worst inconsistency example domain.
** DONE Add to user interface:
  - Jumping to step, to end.
  - Toggle labels.
  - Write last event for mouse-over event. 
** DONE Write the script for videos.
** DONE Produce the videos.
** DONE Check the submission instructions at https://www.elsevier.com/books-and-journals/content-innovation/original-software-publications#instructions-how-to-submit-your-software-work
** DONE Append the main page with the recent design decisions.
  - Policy services and the use of CRTP.
  - User-defined command line options.
  - Dealing with dependencies: forward declarations of user-defined facilities that can be used as default template arguments in the core facilities (and defining symbols?).
** Implement IDA* and update video — 11 days, starting Tue. 6.09
*** DONE Neighbor policy for Astar — 4 days
CLOSED: [2016-09-27 Tue 16:03]
**** DONE The Pancake domain:
CLOSED: [2016-09-06 Tue 14:57]
  + Move
  + Move Successors
  + Dynamic gap heuristic
**** DONE Neighbor types
CLOSED: [2016-09-09 Fri 16:15]
**** DONE Changes in Algorithm and Astar
CLOSED: [2016-09-09 Fri 16:15]
**** DONE Configuration and make sure both versions work.
CLOSED: [2016-09-22 Thu 18:41]
*** DONE IDA — 3 days
CLOSED: [2016-09-27 Tue 16:03]
**** DONE A draft implementation
CLOSED: [2016-09-23 Fri 16:00]
**** DONE The two Backtracking policies
CLOSED: [2016-09-23 Fri 16:01]
**** Putting it together and making sure it works
*** DONE Events — 3 days
Decided to leave at minimal.
CLOSED: [2016-09-27 Tue 16:03]
**** Re-organizing events and making sure Astar works
**** Adding events for IDA*
**** Make sure all examples work.
*** DONE Update video — 1 day
Decided not to update.
CLOSED: [2016-09-27 Tue 16:04]
** DONE Prepare the OSP paper
CLOSED: [2016-09-27 Tue 16:04]
- Use as motivation: http://modeling-languages.com/json-schema-discoverer/
  - Produce a nice picture of components that comprise a heuristic search experiment. This picture is to be used in the introduction.
  - Produce a nice picture to show hierarchical organization of configuration.
  - Insert a picture of the working system (white background?) in the example.
  - Make sure to not put in a lot of implementation details — I have the right to submit a regular paper as well!
  - Make sure to not exceed 5 pages.c
  - Make sure to comply with all the instructions: https://www.elsevier.com/books-and-journals/content-innovation/original-software-publications#instructions-how-to-submit-your-software-work
* Remains on 27.09: [2/13]
Each thing on this list is not long. They should take one day on average. The days remaining until Sukkot are: 28.09–30.09, 5.10–7.10, 9.10–10.10, 13–14.10. So, 10 days, which are also very busy. There are 13 items on the list, so I should expect to submit the paper in the first two weeks after Sukkot, e.g. by 4.11. I will then update k-goal config files to work with Roni. 
** DONE Organize folders. 
CLOSED: [2016-09-28 Wed 12:43]
Make sure IDA* and A* configs compile and run with and without -v 0. 
** DONE See if I can get rid of AlgorithmTraits similarly to how I got rid of logFlag there.
CLOSED: [2016-09-28 Wed 15:48]
Answer: we need it. logFlag is different, since it is data and gets inherited by concrete algorithms. For types, using CRTP makes a problem.
http://stackoverflow.com/a/2749029/2725810
Here is an example that shows the problem:
#+BEGIN_SRC C++
template <class MyAlg>
struct Gen {
    bool x = MyAlg::flag; // this line is fine
    typename MyAlg::T y;  // this does not compile
};

template <class Concrete, bool flag_, template <class> class MyGen>
struct Alg {
    static const bool flag = flag_;
    using T = int;

    MyGen<Concrete> g_; // If we have Alg instead of Concrete here, all works
};

template <bool flag_, template <class> class MyGen = Gen>
struct Astar : Alg<Astar<flag_, MyGen>, flag_, MyGen> {
    using Base = Alg<Astar<flag_, MyGen>, flag_, MyGen>;
    using Base::T;
};

int main() {
    Astar<true> a; (void)a;
    return 0;
}
#+END_SRC

** TODO Introduce necessary namespaces and make the naming consistent (singular/plural).
There should be a namespace for each policy.
This one turned out to be challenging. Lesson: apply such changes little by little instead of breaking the whole code. The changes are:
- Make Pancake reside in ext::domain::pancake and include namespace specifier with SLB_STATE. Remember about the forward declaration of Pancake. Temporarily derive Pancakes from Domains::Base.
- Make CommandLine::Pancake be ext::domain::pancake::CommandLine.
- Make GapHeuristic also be in ext::domain::pancake.
- Rename CommandLine namespace for commandLine.
- Get rid of domain Domains, rename Domains::Base for DomainBase.
- Make similar changes for the GridMapState and IncWorst domains. Factor out the namespaces into the headers.h.
- Move Astar into ext::algorithm.
- Move DomainBase into a separate file.
- Move AlgorithmTraits into ext::algorithm. In POLICY_TYPES, introduce the Traits alias.
- Move the definition of AlgorithmTraits into algorithm.h. Leave in shared_policies/headers.h only the forward declaration. While on it, move BASE_TRAITS_TYPES to appear after BaseTraits.
- Move all the algorithms into ext::algorithm, factoring ext::algorithm out into headers.h. While on this, simplify the configuration file pancake.idastar.h.
- Rename Events::Base into EventBase. While on it, add a virtual destructor to EventBase.
- Rename the Events namespace for /event/.
- Rename the InstanceMeasures namespace for instanceMeasure and put it into ext::. Move the forward declaration out of instance.h and make it list the actual classes.
- Rename the Nodes namespace for /node/. Move the forward declaration out of declare_default.h and make it list the actual classes. Move ManagedNode out of namespace. Factor out namespaces where forgot to do so.
  Also put events in the ext::event namespace (they were in event:: before).
- Put BacktrackLock policies into ext::policy::backtrackLock::.
- Put generator policies into ext::policy::generator::.
- Put goal handling policies into ext::policy::goalHandler::.
- Put heuristic policies into ext::policy::heuristic::.
- Shorten the names of BacktrackLock policies.
- Shorten the names of generator policies.
- Shorten the names of goal handling policies.
- Put OpenList into ext::policy::openList and rename it to be BucketedStdMap.
- Get rig of the need for NODE_DATA_T in configuration files.
- Factor out ext::policy:: and comment policy::.
- Factor out ext:: and comment it. Also, move grid_map to core/search_base.
- Comment nested namespaces.
- Add slbcore::sb. The names slbcore is temporary to avoid conflicts with boost::core. We will rename it to slb::core later.
- Add slbcore::ui
- Add slbcore::util
- Factor out slbcore::
- Add slb:: and rename slb::slbcore for slb::core.
** TODO Document the components of IDA*.
** TODO Document utils/ and include it in doxygen configuration file.
** TODO Make sure the output of doxygen is error-free.
** TODO Make sure that all the namespaces and namespace members appear correctly in the doxygen configuration.
** TODO Make two notes in documentation: 
- About the deviation of configs in video from the current configs.
- About the namespaces matching the physical structure.
** TODO Make sure that std::move is used wherever needed (i.e. wherever right reference is used). 
** TODO Either add to bugs or fix the issue with layout computation not converging.
** TODO Improve the symbols tool.
** TODO Make final check that all (really all) demo versions run with and without -v 0. 
** TODO Proofread the paper.
** TODO Submit
* After submission
- Update k-goal config files and make sure the scripts produce results comparable with what we have. 
- Understand again why we need this complicated GroupLock in graphics_object and how exactly it works.
- Simplify implementation of logWindow. We can always first decide to which step to move and the move to that step.

