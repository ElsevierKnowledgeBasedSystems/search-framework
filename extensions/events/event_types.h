#ifndef EVENT_TYPES_H
#define EVENT_TYPES_H

/// \file
/// \brief Types of events generated by the search algorithms.
/// \author Meir Goldenberg

namespace Events {

/// An event with no visual change. However, such an event is useful by virtue
/// of implementing the \c eventStr and \c eventType methods.
/// \tparam Node The search node type.
template <class Node = SLB_NODE> struct NoChange : Base<Node> {
    using Events::Base<Node>::Base; ///< Using the base's constructors.
};

/// An event that applies the same visual changes to all participating states and
/// edges.
/// \tparam Node The search node type.
template <class Node = SLB_NODE> struct UniformChange : Base<Node> {
    /// The state type, represents the domain.
    using State = typename Node::State;

    /// Shared pointer to constant state.
    using StateSharedPtr = deref_shared_ptr<const State>;

    /// The type for holding participating states.
    using StateSet = std::vector<StateSharedPtr>;

    /// The type representing an edge in the state graph.
    using Edge = std::pair<StateSharedPtr, StateSharedPtr>;

    /// The type for holding participating edges of the state graph.
    using EdgeSet = std::vector<Edge>;

    /// Using the base's constructors.
    using Events::Base<Node>::Base;

    /// The type for holding all the visual changes associated with the event.
    using VisualChanges = typename Events::Base<Node>::VisualChanges;

    /// Returns the visual changes associated with the event. The changes are
    /// computed based on the supplied current styles of vertices and edges in
    /// the visual representation.
    /// \param styles Current styles of vertices and edges in the visual
    /// representation.
    /// \return The visual changes associated with the event and corresponding
    /// to \c styles.
    VisualChanges
    visualChanges(const CurrentStyles<State> &styles) const {
        VisualChanges res;
        StateSet states;
        EdgeSet edges;
        participants(states, edges);
        for (auto &s : states) {
            VertexStyle before = styles.get(s);
            VertexStyle now = before;
            change(now, s);
            res.vChanges.push_back({s, now, before});
        }
        for (auto &a : edges) {
            EdgeStyle before = styles.get(a.first, a.second);
            EdgeStyle now = before;
            change(now, a);
            res.eChanges.push_back({a.first, a.second, now, before});
        }
        return res;
    }

protected:
    /// Fills out the sets of participating states and edges of the state graph.
    virtual void participants(StateSet &, EdgeSet &) const = 0;

    /// Modifies the visual representation style of the given participating
    /// state.
    virtual void change(VertexStyle &, const StateSharedPtr &) const {};

    /// Modifies the visual representation style of the given participating
    /// edge of the state graph.
    virtual void change(EdgeStyle &, const Edge &) const {};
};

/// An event that applies visual changes to the vertex of the state graph
/// corresponding to the state associated with the event.
/// \tparam Node The search node type.
template <class Node = SLB_NODE> struct VertexChange : UniformChange<Node> {
    /// The direct base class.
    using DirectBase = UniformChange<Node>;

    /// The type for holding participating states.
    using StateSet = typename DirectBase::StateSet;

    /// The type for holding participating edges of the state graph.
    using EdgeSet = typename DirectBase::EdgeSet;

    /// Using the direct base's constructors.
    using DirectBase::UniformChange;

    /// Using the \c state_ variable of the base.
    using Base<Node>::state_;

protected:
    /// Fills out the sets of participating states and edges of the state graph.
    /// In this case, it is only the state associated with the event.
    /// \param states The set of participating states to be filled out. In this
    /// case, it is a single state -- the state associated with the event.
    virtual void participants(StateSet &states, EdgeSet &) const {
        states.push_back(state_);
    }
};

/// An event that applies visual changes to both the vertex of the state graph
/// corresponding to the state associated with the event and the edge by which
/// the search algorithm arrived to this state.
/// \tparam Node The search node type.
template <class Node = SLB_NODE> struct VertexEdgeChange : UniformChange<Node> {
    /// The direct base class.
    using DirectBase = UniformChange<Node>;

    /// The type for holding participating states.
    using StateSet = typename DirectBase::StateSet;

    /// The type for holding participating edges of the state graph.
    using EdgeSet = typename DirectBase::EdgeSet;

    /// Using the direct base's constructors.
    using DirectBase::UniformChange;

    /// Using the \c state_ variable of the base.
    using Base<Node>::state_;

    /// Using the \c parent_ variable of the base.
    using Base<Node>::parent_;

    /// Using the \c parentSubstitution_ variable of the base.
    using Base<Node>::parentSubstitution_;

protected:
    /// Fills out the sets of participating states and edges of the state graph.
    /// In this case, these sets consist of the state associated with the event
    /// and the edge by which the search algorithm arrived to this state,
    /// respectively.
    /// \param states The set of participating states to be filled out. In this
    /// case, it is a single state -- the state associated with the event.
    /// \param edges The set of participating edges to be filled out. In this
    /// case, it is a single edge -- the edge by which the search algorithm
    /// arrived to the state associated with the event.
    virtual void participants(StateSet &states, EdgeSet &edges) const {
        states.push_back(state_);
        if (parentSubstitution_ != nullptr)
            edges.push_back({parentSubstitution_, state_});
        else if (parent_ != nullptr)
            edges.push_back({parent_, state_});
    }
};

/// An event that applies visual changes to states and edges of the state graph
/// along a path.
/// \tparam Node The search node type.
template <class Node = SLB_NODE> struct PathChange : UniformChange<Node> {
    /// The direct base class.
    using DirectBase = UniformChange<Node>;

    /// The type for holding participating states.
    using StateSet = typename DirectBase::StateSet;

    /// The type for holding participating edges of the state graph.
    using EdgeSet = typename DirectBase::EdgeSet;

    /// Using the direct base's constructors.
    using DirectBase::UniformChange;

protected:
    /// Fills out the sets of participating states and edges of the state
    /// graph. In this case, these are states and edges along the path returned
    /// by the \ref path method.
    /// \param states The set of participating states to be filled out. In this
    /// case, these are states along the path returned by the \ref path method.
    /// \param edges The set of participating edges to be filled out. In this
    /// case, these are edges along the path returned by the \ref path method.
    virtual void participants(StateSet &states, EdgeSet &edges) const {
        states = path();
        for (int i = 0; i != states.size() - 1; ++i)
            edges.push_back({states[i], states[i + 1]});
    }

    /// Returns the path to which the visual changes are applied.
    /// \return The states along the path to which the visual changes are
    /// applied.
    virtual StateSet path() const = 0;
};

/// An event that applies visual changes to states and edges of the state graph
/// along the path leading to the state associated with the event.
/// \tparam Node The search node type.
template <class Node = SLB_NODE> struct SolutionPathChange : PathChange<Node> {
    /// The direct base class.
    using DirectBase = PathChange<Node>;

    /// The type for holding participating states.
    using StateSet = typename DirectBase::StateSet;

    /// Using the direct base's constructors.
    using DirectBase::PathChange;

    /// Using the \c state_ variable of the base.
    using Base<Node>::state_;

protected:
    /// Returns the path to which the visual changes are applied. In this case,
    /// it's the path leading to the state associated with the event.
    /// \return The states along the path to which the visual changes are
    /// applied. In this case, it's the path leading to the state associated
    /// with the event.
    virtual StateSet path() const {
        return Base<Node>::path(state_);
    };
};

/// An event that marks the vertex corresponding to the state associated with
/// the event.
/// \tparam Node The search node type.
template <class Node = SLB_NODE> struct VertexEmphasis : VertexChange<Node> {
    /// Shared pointer to constant state.
    using StateSharedPtr = typename Base<Node>::StateSharedPtr;

    /// Using the direct base's constructors.
    using VertexChange<Node>::VertexChange;

protected:
    /// Modifies the visual representation style of the given participating
    /// state. In this case, the change is the mark with color and size returned
    /// by \ref color and \ref size methods, respectively.
    virtual void change(VertexStyle &style,
                        const StateSharedPtr &) const override {
        style.emphasisColor = color();
        style.emphasisSizeFactor = size();
    };
private:
    /// Returns the color of the mark that will be applied to the vertex.
    /// \return the color of the mark that will be applied to the vertex.
    virtual Color color() const = 0;

    /// Returns the size of the mark that will be applied to the vertex.
    /// \return the size of the mark that will be applied to the vertex.
    virtual double size() const = 0;
};

/// An event that changes the color of the vertex corresponding to the state
/// associated with the event.
/// \tparam Node The search node type.
template <class Node = SLB_NODE> struct VertexColor : VertexChange<Node> {
    /// Shared pointer to constant state.
    using StateSharedPtr = typename Base<Node>::StateSharedPtr;

    /// Using the direct base's constructors.
    using VertexChange<Node>::VertexChange;

protected:
    /// Modifies the visual representation style of the given participating
    /// state. In this case, the change is the change of color to be the color
    /// returned by \ref color method.
    virtual void change(VertexStyle &style,
                        const StateSharedPtr &) const override {
        style.fillColor = color();
    };

    /// Returns the new color of the vertex corresponding to the state
    /// associated with the event.
    /// \return The new color of the vertex corresponding to the state
    /// associated with the event.
    virtual Color color() const = 0;
};

/// An event that applies a color change to both the vertex of the state graph
/// corresponding to the state associated with the event and the edge by which
/// the search algorithm arrived to this state.
/// \tparam Node The search node type.
template <class Node = SLB_NODE>
struct VertexEdgeColor : VertexEdgeChange<Node> {
    /// Shared pointer to constant state.
    using StateSharedPtr = typename UniformChange<Node>::StateSharedPtr;

    /// The type representing an edge in the state graph.
    using Edge = typename UniformChange<Node>::Edge;

    /// Using the direct base's constructors.
    using VertexEdgeChange<Node>::VertexEdgeChange;

protected:
    /// Modifies the visual representation style of the given participating
    /// state. In this case, the change is the change of color to be the color
    /// returned by \ref color method.
    virtual void change(VertexStyle &style,
                        const StateSharedPtr &) const override {
        style.fillColor = color();
    };

    /// Modifies the visual representation style of the given participating
    /// edge. In this case, the change is the change of color to be the color
    /// returned by \ref color method.
    virtual void change(EdgeStyle &style, const Edge &) const override {
        style.color = color();
    };

    /// Returns the new color of both the vertex of the state graph
    /// corresponding to the state associated with the event and the edge by
    /// which the search algorithm arrived to this state.
    /// \return The new color of both the vertex of the state graph
    /// corresponding to the state associated with the event and the edge by
    /// which the search algorithm arrived to this state.
    virtual Color color() const = 0;
};
}
#endif
